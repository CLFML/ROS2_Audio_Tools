{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>Welcome to the ROS2_Audio_Tools project wiki.</p>"},{"location":"about/implementation/","title":"Audio Tools Node implementations","text":"<p>Here some brief details as how the functionality is implemented.</p>"},{"location":"about/implementation/#audio_capture_node","title":"<code>audio_capture_node</code>","text":"<p>Audio Capture Node using SDL2 for ROS 2</p> <p>Captures raw audio from an input device and publishes it via ROS topics. Useful for audio processing pipelines, speech recognition, or diagnostics.</p>"},{"location":"about/implementation/#topics","title":"\u2705 Topics","text":"Topic Type Description <code>/audio</code> <code>audio_tools/msg/AudioData</code> Raw audio byte stream <code>/audio_stamped</code> <code>audio_tools/msg/AudioDataStamped</code> Audio with timestamp + info <code>/audio_info</code> <code>audio_tools/msg/AudioInfo</code> Metadata (sample rate, format, etc.)"},{"location":"about/implementation/#parameters","title":"\u2699\ufe0f Parameters","text":"Name Type Default Description <code>sample_format</code> <code>string</code> <code>S16LE</code> Audio format (<code>S16LE</code>, <code>F32LE</code>, etc.) <code>channels</code> <code>int</code> <code>1</code> Number of channels (1\u20138) <code>sample_rate</code> <code>int</code> <code>16000</code> Sampling rate in Hz <code>device</code> <code>int</code> <code>-1</code> Device index (-1 = default input device) <code>chunk_size</code> <code>int</code> <code>1024</code> Buffer size per capture call (512\u20134096)"},{"location":"about/implementation/#message-notes","title":"\ud83d\udce6 Message Notes","text":"<ul> <li><code>AudioData</code>: raw <code>uint8[] data</code></li> <li><code>AudioDataStamped</code>:</li> <li><code>std_msgs/Header header</code> with <code>stamp</code> and <code>frame_id</code></li> <li><code>AudioData audio</code></li> <li><code>AudioInfo info</code></li> <li><code>AudioInfo</code> includes:</li> <li><code>sample_rate</code></li> <li><code>sample_format</code></li> <li><code>channels</code></li> </ul>"},{"location":"about/implementation/#implementation-notes","title":"\ud83e\udde9 Implementation Notes","text":"<ul> <li>Uses SDL2 for low-latency cross-platform audio capture.</li> <li>Device info is printed on startup.</li> <li>Buffer timestamping is calculated based on sample rate and byte depth.</li> <li>Publishes metadata (<code>/audio_info</code>) every 5 seconds.</li> <li>All audio capture runs on a callback triggered by SDL2.</li> </ul>"},{"location":"about/implementation/#launch-example","title":"\ud83c\udfc1 Launch Example","text":"<pre><code>ros2 run audio_tools audio_capture_node \\\n  --ros-args \\\n  -p sample_rate:=16000 \\\n  -p channels:=1 \\\n  -p device:=-1\n</code></pre>"},{"location":"about/implementation/#dependencies","title":"\ud83e\uddea Dependencies","text":"<ul> <li><code>rclcpp</code></li> <li><code>SDL2</code></li> <li>Custom messages in <code>audio_tools</code></li> </ul>"},{"location":"about/implementation/#audio_playback_node","title":"<code>audio_playback_node</code>","text":"<p>Audio Playback Node using SDL2 for ROS 2</p> <p>Subscribes to audio messages and plays them in real-time through an output device using SDL2.</p>"},{"location":"about/implementation/#topics_1","title":"\u2705 Topics","text":"Topic Type Description <code>/audio_playback</code> (default) <code>audio_tools/msg/AudioDataStamped</code> Audio stream with metadata"},{"location":"about/implementation/#parameters_1","title":"\u2699\ufe0f Parameters","text":"Name Type Default Description <code>audio_topic</code> <code>string</code> <code>/audio_playback</code> Topic to subscribe to for audio data <code>device_index</code> <code>int</code> <code>-1</code> Index of output device (-1 = default device)"},{"location":"about/implementation/#expected-message-format","title":"\ud83d\udce6 Expected Message Format","text":"<ul> <li><code>AudioDataStamped</code>:</li> <li><code>AudioData audio</code>: raw audio byte stream</li> <li><code>AudioInfo info</code>: playback metadata:<ul> <li><code>sample_rate</code></li> <li><code>sample_format</code></li> <li><code>channels</code></li> </ul> </li> </ul>"},{"location":"about/implementation/#implementation-notes_1","title":"\ud83e\udde9 Implementation Notes","text":"<ul> <li>Uses SDL2 to output audio through a selected or default device.</li> <li>Supports multiple formats: <code>S16LE</code>, <code>S16BE</code>, <code>U8</code>, <code>S8</code>, <code>F32LE</code>, <code>F32BE</code></li> <li>Device info printed on startup.</li> <li>Initializes playback only on receiving the first message (lazy init).</li> <li>Queues audio chunks using <code>SDL_QueueAudio()</code>.</li> </ul>"},{"location":"about/implementation/#launch-example_1","title":"\ud83c\udfc1 Launch Example","text":"<pre><code>ros2 run audio_tools audio_playback_node \\\n  --ros-args \\\n  -p audio_topic:=/audio_stamped \\\n  -p device_index:=-1\n</code></pre>"},{"location":"about/implementation/#dependencies_1","title":"\ud83e\uddea Dependencies","text":"<ul> <li><code>rclcpp</code></li> <li><code>SDL2</code></li> <li>Custom messages in <code>audio_tools</code></li> </ul>"},{"location":"about/implementation/#vad_node","title":"<code>vad_node</code>","text":"<p>Voice Activity Detection Node for ROS 2</p> <p>Analyzes audio streams to detect the presence of speech or voice activity and publishes the detection state. Useful for conversation systems, wake word triggers, and audio recording automation.</p>"},{"location":"about/implementation/#topics_2","title":"\u2705 Topics","text":"Topic Type Description <code>/voice_activity</code> <code>audio_tools/msg/VoiceActivity</code> Voice activity detection state Subscribes to: <code>/audio_stamped</code> <code>audio_tools/msg/AudioDataStamped</code> Audio input for analysis ---"},{"location":"about/implementation/#parameters_2","title":"\u2699\ufe0f Parameters","text":"Name Type Default Description <code>energy_threshold</code> <code>float</code> <code>0.01</code> Detection sensitivity threshold <code>hold_time</code> <code>float</code> <code>0.5</code> Time in seconds to maintain detection after voice stops <code>min_samples</code> <code>int</code> <code>160</code> Minimum samples needed for detection decision ---"},{"location":"about/implementation/#message-notes_1","title":"\ud83d\udce6 Message Notes","text":"<ul> <li><code>VoiceActivity</code>:</li> <li><code>std_msgs/Header header</code> with <code>stamp</code> and <code>frame_id</code></li> <li><code>bool active</code> - Detection state (true/false)</li> <li><code>float32 energy_level</code> - Current audio energy level</li> <li><code>float32 threshold</code> - Detection threshold in use</li> <li><code>float32 hold_time</code> - Time to hold detection state after voice stops</li> </ul>"},{"location":"about/implementation/#implementation-notes_2","title":"\ud83e\udde9 Implementation Notes","text":"<ul> <li>Uses an energy-based algorithm for voice detection.</li> <li>Converts all audio formats to normalized float [-1.0, 1.0] for processing.</li> <li>Energy calculation: <code>energy = sum(sample * sample) / num_samples</code></li> <li>Hold timer prevents rapid switching between states during pauses.</li> <li>Format conversion supports U8, S8, S16LE, S16BE, F32, etc.</li> </ul>"},{"location":"about/implementation/#launch-example_2","title":"\ud83c\udfc1 Launch Example","text":""},{"location":"about/implementation/#ros2-run-audio_tools-vad_node-ros-args-p-energy_threshold0015-p-hold_time07-p-min_samples160","title":"<pre><code>ros2 run audio_tools vad_node \\\n --ros-args \\\n-p energy_threshold:=0.015 \\\n-p hold_time:=0.7 \\\n-p min_samples:=160\n</code></pre>","text":""},{"location":"about/implementation/#dependencies_2","title":"\ud83e\uddea Dependencies","text":"<ul> <li><code>rclcpp</code></li> <li><code>audio_tools/msg/AudioDataStamped</code></li> <li><code>audio_tools/msg/VoiceActivity</code></li> </ul>"},{"location":"contributing/license/","title":"License","text":"<p>This work is licensed under the apache-2.0 license.</p>"},{"location":"contributing/rules/","title":"Contribution rules","text":"<p>For contributing we recommend creating a fork and when ready a pull request to merge the changes with this repository.  In the pull request please state:</p> <ul> <li>What has been added/changed?</li> <li>Some reasoning about implementation details</li> </ul> <p>Please don't do refactors without consent of administrators  as we will not merge them."},{"location":"contributing/rules/#new-features","title":"New features","text":"<p>If you have any cool feature/idea to add to the code, please start an issue in GitHub to introduce the idea to the maintainers.</p>"},{"location":"usage/overview/","title":"Getting started","text":""},{"location":"usage/overview/#quick-start-examples","title":"\ud83d\ude80 Quick Start Examples","text":"<p>See node documentation above for parameters &amp; message formats.</p>"},{"location":"usage/overview/#1-start-audio-capture-node","title":"\ud83d\udd0a 1. Start Audio Capture Node","text":"<p>Capture microphone input and publish to <code>/audio_stamped</code>.</p> <pre><code>ros2 run audio_tools audio_capture_node\n</code></pre> <p>Custom sample rate &amp; stereo:</p> <pre><code>ros2 run audio_tools audio_capture_node \\\n  --ros-args -p sample_rate:=44100 -p channels:=2\n</code></pre>"},{"location":"usage/overview/#2-start-playback-node-default-device","title":"\ud83c\udfa7 2. Start Playback Node (Default Device)","text":"<p>Play back from <code>/audio_stamped</code> using system default output.</p> <pre><code>ros2 run audio_tools audio_playback_node \\\n  --ros-args -p audio_topic:=/audio_stamped\n</code></pre>"},{"location":"usage/overview/#3-use-a-specific-output-device","title":"\ud83c\udf9b\ufe0f 3. Use a Specific Output Device","text":"<p>List devices first (done automatically on launch), then select one:</p> <pre><code>ros2 run audio_tools audio_playback_node \\\n  --ros-args -p device_index:=1\n</code></pre>"},{"location":"usage/overview/#4-full-loopback-test","title":"\ud83d\udd04 4. Full Loopback Test","text":"<p>Run both nodes to capture &amp; play audio:</p> <pre><code># Terminal 1\nros2 run audio_tools audio_capture_node\n\n# Terminal 2\nros2 run audio_tools audio_playback_node \\\n  --ros-args -p audio_topic:=/audio_stamped\n</code></pre>"},{"location":"usage/overview/#5-voice-activity-detection","title":"\ud83d\udde3\ufe0f 5. Voice Activity Detection","text":"<p>Capture microphone input and publish to <code>/audio_stamped</code>. Simple energy-based Voice Activity Detection (VAD) node on <code>/audio_stamped</code> and publishes detection results to <code>/voice_activity</code>. Note that VAD parameters are set in launch file.</p> <pre><code># Terminal 1\nros2 launch audio_tools audio_vad.launch.py\n\n# Terminal 2\nros2 topic echo /voice_activity\n</code></pre>"},{"location":"usage/ros2_pixi_build_linux_windows/","title":"Getting started with Pixi","text":"<p>Pixi makes cross-platform ROS 2 development easy. You can build and run both capture and playback nodes on Linux and Windows\u2014with no system-wide ROS install.</p>"},{"location":"usage/ros2_pixi_build_linux_windows/#install-pixi","title":"\ud83d\udce6 Install Pixi","text":"<p>Linux:</p> <pre><code>curl -fsSL https://pixi.sh/install.sh | bash\n</code></pre> <p>Windows (PowerShell):</p> <pre><code>powershell -ExecutionPolicy ByPass -c \"irm -useb https://pixi.sh/install.ps1 | iex\"\n</code></pre>"},{"location":"usage/ros2_pixi_build_linux_windows/#clone-build-project","title":"\ud83d\ude80 Clone &amp; Build Project","text":"<pre><code>git clone https://github.com/CLFML/ROS2_Audio_Tools.git\ncd ROS2_Audio_Tools\npixi install\npixi run build\n</code></pre> <p>Or launch VSCode with the environment:</p> <pre><code>pixi run vscode\n</code></pre> <p>\u2705 Note (Windows): Always build in Release or RelWithDebInfo, not Debug! (Ctrl+Shift+P \u2192 \"CMake: Select Variant\")</p>"},{"location":"usage/ros2_pixi_build_linux_windows/#using-as-a-pixi-dependency","title":"\u26a1 Using as a Pixi Dependency","text":"<p>Want to use <code>audio_tools</code> from another Pixi-based project?</p>"},{"location":"usage/ros2_pixi_build_linux_windows/#1-init-a-new-project","title":"1. Init a new project","text":"<pre><code>mkdir my_audio_project &amp;&amp; cd my_audio_project\npixi init\n</code></pre>"},{"location":"usage/ros2_pixi_build_linux_windows/#2-edit-pixitoml","title":"2. Edit <code>pixi.toml</code>","text":"<p>Add these:</p> <pre><code>[project]\nchannels = [\n  \"https://fast.prefix.dev/conda-forge\",\n  \"https://prefix.dev/robostack-jazzy\",\n  \"https://clfml.github.io/conda_ros2_jazzy_channel/\"\n]\n\n[dependencies]\nros-jazzy-ros-base = \"*\"\nros-jazzy-audio-tools = \"*\"\ncolcon-common-extensions = \"*\"\nrosdep = \"*\"\n</code></pre>"},{"location":"usage/ros2_pixi_build_linux_windows/#optional-vscode-support","title":"\ud83e\udde0 Optional: VSCode Support","text":"<p>Add to your <code>pixi.toml</code>:</p> <pre><code>[target.linux-64.dependencies]\npython-devtools = \"*\"\npybind11 = \"*\"\nnumpy = \"*\"\n\n[target.win-64.dependencies]\npython-devtools = \"*\"\n\n[target.linux-64.tasks]\nvscode = 'env -u LD_LIBRARY_PATH code .'\n\n[target.win-64.tasks]\nvscode = \"code .\"\n</code></pre>"},{"location":"usage/ros2_pixi_build_linux_windows/#3-run-the-nodes","title":"3. Run the nodes","text":"<pre><code>pixi install\npixi run ros2 run audio_tools audio_capture_node\n</code></pre>"},{"location":"usage/ros2_pixi_build_linux_windows/#example-full-audio-loopback","title":"\u25b6\ufe0f Example: Full Audio Loopback","text":"<p>Launch both nodes using ROS 2 launch (It is really advised to use headphones!):</p> <pre><code>pixi run build\npixi shell\n# Windows:\n.\\install\\setup.bat\n# Linux:\nsource install/setup.sh\n</code></pre>"},{"location":"usage/usage_with_native_linux/","title":"\ud83d\udc27 Getting Started with Native ROS","text":"<p>Prefer a traditional system-wide install? Use the prebuilt <code>.deb</code> package for Ubuntu Noble / ROS 2 Jazzy.</p>"},{"location":"usage/usage_with_native_linux/#install-audio-tools-via-deb","title":"\ud83d\udce6 Install Audio Tools via <code>.deb</code>","text":"<p>Install the latest <code>.deb</code> package directly from Releases:</p> <pre><code>curl -s https://api.github.com/repos/CLFML/ROS2_Audio_Tools/releases/latest \\\n  | grep \"browser_download_url.*deb\" \\\n  | cut -d : -f 2,3 \\\n  | tr -d \\\" \\\n  | wget -qi -\nsudo dpkg -i ./ros-jazzy-audio-tools*.deb\n</code></pre>"},{"location":"usage/usage_with_native_linux/#run-the-nodes","title":"\u2705 Run the Nodes","text":"<p>Make sure ROS is sourced:</p> <pre><code>source /opt/ros/jazzy/setup.sh\n</code></pre>"},{"location":"usage/usage_with_native_linux/#capture-audio","title":"Capture Audio","text":"<pre><code>ros2 run audio_tools audio_capture_node\n</code></pre>"},{"location":"usage/usage_with_native_linux/#playback-audio","title":"Playback Audio","text":"<pre><code>ros2 run audio_tools audio_playback_node \\\n  --ros-args -p audio_topic:=/audio_stamped\n</code></pre>"},{"location":"usage/usage_with_native_linux/#full-loopback-example","title":"\ud83d\udd01 Full Loopback Example","text":"<p>Start both nodes:</p> <pre><code># Terminal 1\nros2 run audio_tools audio_capture_node\n\n# Terminal 2\nros2 run audio_tools audio_playback_node \\\n  --ros-args -p audio_topic:=/audio_stamped\n</code></pre> <p>Let me know if you'd like this wrapped into a script or included in a full install guide!</p>"}]}